//----------------------------------------------------------------------------
/*! \file
 *  \brief  class implementation of LabelBehavour
 *  \author Roland Kiefert
 *  \date   08.09.2006
 */
//----------------------------------------------------------------------------

//---------------------------------------------------------------------------------------//
// includes
//---------------------------------------------------------------------------------------//
#include "labelbehavour.h"

#pragma warning (push)
#pragma warning (disable: 4231 4244 4800)
#include <QtWidgets/QLabel>
#pragma warning (pop)

//---------------------------------------------------------------------------------------//
// namespaces
//---------------------------------------------------------------------------------------//
namespace basar {
namespace gui {
namespace tie {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
LabelBehavour::LabelBehavour(PGuiPropTbl pPt,
							 std::list<QWidget*>::iterator it )
							: ControlBehavour(pPt, it)
{
	m_labelwidget = static_cast<QLabel*>( (*m_it) );
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
LabelBehavour::~LabelBehavour()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void LabelBehavour::setString( const I18nString& rValue, Int32, Int32 )
{
	m_labelwidget->setText( QString::fromLocal8Bit(rValue.c_str()) );	
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\return I18nString value of the current line in the current ctrl.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
I18nString LabelBehavour::getString(Int32, Int32) const
{
	return m_labelwidget->text().toLocal8Bit().constData();	
}

///////////////////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void LabelBehavour::clear()
{
	m_labelwidget->clear();
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw	no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void LabelBehavour::erase( Int32 )
{
}
///////////////////////////////////////////////////////////////////////////////////////////
/*! \return Int32:	number of hits that the ctrl with the most hits (shown rows/items) has.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////
Int32 LabelBehavour::maxCountOfControls() const
{
	return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw no-throw
//! \return type of given QObject
///////////////////////////////////////////////////////////////////////////////////////////
WidgetTypes	LabelBehavour::getWidgetType() const
{
	return qLabel;
}

}// tie
} // gui
} // basar
