//----------------------------------------------------------------------------
/*! \file
 *  \brief  class implementation of RadioButtonBehavour
 *  \author Roland Kiefert
 *  \date   08.09.2006
 */
//----------------------------------------------------------------------------


//---------------------------------------------------------------------------------------//
// includes
//---------------------------------------------------------------------------------------//
#include "radiobuttonbehavour.h"

#include "libbasarguitie_transformer.h"

#pragma warning (push)
#pragma warning (disable: 4231 4244 4800)
#include <QtWidgets/QRadioButton>
#pragma warning (pop)

//---------------------------------------------------------------------------------------//
// namespaces
//---------------------------------------------------------------------------------------//
namespace basar {
namespace gui {
namespace tie {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
RadioButtonBehavour::RadioButtonBehavour(PGuiPropTbl                   pPt,
										 std::list<QWidget*>::iterator it )
										: ControlBehavour(pPt, it)
{
	m_RadioButtonWidget = static_cast<QRadioButton*>( (*m_it) );
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
RadioButtonBehavour::~RadioButtonBehavour()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void RadioButtonBehavour::setString( const I18nString& rValue, Int32, Int32 )
{
	bool state = false;

	if (RadioButtonTransformer::s_STATEON == rValue)
		state = true;

	m_RadioButtonWidget->setChecked(state);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\return I18nString value of the current line in the current ctrl.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
I18nString RadioButtonBehavour::getString(Int32, Int32) const
{
	if (m_RadioButtonWidget->isChecked())
		return RadioButtonTransformer::s_STATEON;
	else
		return RadioButtonTransformer::s_STATEOFF;
}

///////////////////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void RadioButtonBehavour::clear()
{
	m_RadioButtonWidget->setChecked(false);
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw	no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void RadioButtonBehavour::erase( Int32 )
{
}
///////////////////////////////////////////////////////////////////////////////////////////
/*! \return Int32:	number of hits that the ctrl with the most hits (shown rows/items) has.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////
Int32 RadioButtonBehavour::maxCountOfControls() const
{
	return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw no-throw
//! \return type of given QObject
///////////////////////////////////////////////////////////////////////////////////////////
WidgetTypes	RadioButtonBehavour::getWidgetType() const
{
	return qRadioButton;
}

}// tie
} // gui
} // basar
