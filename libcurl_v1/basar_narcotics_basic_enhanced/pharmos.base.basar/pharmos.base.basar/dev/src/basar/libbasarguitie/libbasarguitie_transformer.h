//----------------------------------------------------------------------------
/*! \file
 *  \brief  extern interface transformer
 *  \author Roland Kiefert 
 *  \date   21.09.2005
 */
//----------------------------------------------------------------------------

#ifndef GUARD_LIBBASARGUITIE_TRANSFORMER_H
#define GUARD_LIBBASARGUITIE_TRANSFORMER_H

//----------------------------------------------------------------------------
#ifndef LIBBASARGUITIE_API
	#ifdef _WIN32
		#ifdef LIBBASARGUITIE_EXPORTS
			#define LIBBASARGUITIE_API __declspec(dllexport)        //!< dll exported
		#else
			#define LIBBASARGUITIE_API __declspec(dllimport)        //!< dll imported
		#endif
	#else
		#define LIBBASARGUITIE_API
	#endif
#endif	// LIBBASARGUITIE_API

//----------------------------------------------------------------------------
#include <boost/shared_ptr.hpp>
#include "libbasarcmnutil_parameterlist.h"
#include "libbasarcmnutil_bstring.h"
#include "libbasardbaspect_accessorpropertytable.h"

//----------------------------------------------------------------------------
namespace basar {

namespace db {
	namespace aspect {
		class AccessorPropertyTable_YIterator;
		class AccessorPropertyTableRef;
	} // aspect
} // db

namespace gui   {
namespace tie   {

//----------------------------------------------------------------------------
class GuiPropertyTable_YIterator;

//----------------------------------------------------------------------------
/*! \brief  A class to transform iterators.

  From this class the programmer must derive his own class (myTransformer).
  He has to overwrite the function RightToLeft() and LeftToRight(). 
  Also he has to overwrite the function create() in the following way 
  "TransformSharedPtr create() { return TransformSharedPtr(new myTransformer(*this)); }"
  This is a value class, copying is allowed, generated by the compiler */
class Transformer
{
public:
	
	typedef boost::shared_ptr < Transformer	>			TransformSharedPtr;		//!< reference to Transformer implementation object
	typedef cmnutil::ParameterList                      ParamList;				//!< abbreviation
	typedef db::aspect::AccessorPropertyTable_YIterator AccPropTblYIterator;	//!< abbreviation
	typedef db::aspect::AccessorPropertyTableRef        AccPropTblRef;			//!< abbreviation

	/*! \brief This destructor supports inheritance. 
		\n	   no-throw */
	LIBBASARGUITIE_API 
	virtual					   ~Transformer		();
	/*! \brief This constructor creates a smart-pointer to the class Transformer 
		\n     no-throw */
	LIBBASARGUITIE_API
								Transformer		();

	/*! \brief move from the right iterator to the left iterator
		\n no-throw */
	LIBBASARGUITIE_API 
	virtual void				RightToLeft		(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
												 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
												) = 0;
	/*! \brief move from the left iterator to the right iterator
		\n no-throw */
	LIBBASARGUITIE_API 
	virtual void				LeftToRight		(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
												 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
												) = 0;

	/*! \brief This method creates this class Transformer itself. Must be overwritten. 
		\n     no-throw */
	LIBBASARGUITIE_API 
	virtual TransformSharedPtr	create			() = 0;
};

//----------------------------------------------------------------------------
//! transform iterators between CheckBoxes, GroupBoxes and Accessors
class CheckBoxTransformer : public Transformer
{
public:
	enum EvaluateEnum	//!  enum to evaluate check box states
	{
		EVAL_STATE_ON,	//!< selected DB value for state "on",   can be all values except of exact off/part values
		EVAL_STATE_PART,//!< selected DB value for state "part", can be all values except of exact off/on   values
		EVAL_STATE_OFF	//!< selected DB value for state "off",  can be all values except of exact on/part  values
	};

	//! destructor										\n no-throw
	LIBBASARGUITIE_API 
	virtual		   ~CheckBoxTransformer	();

	//! constructor	for twostate check box				\n no-throw
	LIBBASARGUITIE_API			
					CheckBoxTransformer	(const VarString & accPropTblCol,			//!< accessor property table column name
	                                     const VarString & rOn  ,					//!< DB value for state "checked"
										 const VarString & rOff ,					//!< DB value for state "unchecked"
										 EvaluateEnum      eEval = EVAL_STATE_OFF	//!< evaluation method
										);

	//! constructor	for twostate check box				\n no-throw
	LIBBASARGUITIE_API				
					CheckBoxTransformer	(const VarString & guiPropTblCol,			//!< gui property table column name
		                                 const VarString & rOn  ,					//!< DB value for state "checked"
										 const VarString & rOff ,					//!< DB value for state "unchecked"
										 EvaluateEnum      eEval,					//!< evaluation method
										 const VarString & accPropTblCol			//!< accessor property table column name
										);

	//! constructor	for tristate check box				\n no-throw
	LIBBASARGUITIE_API
					CheckBoxTransformer	(const VarString & accPropTblCol,			//!< accessor property table column name
		                                 const VarString & rOn  ,					//!< DB value for state "checked"
		                                 const VarString & rPart,					//!< DB value for state "partially checked"
										 const VarString & rOff ,					//!< DB value for state "unchecked"
										 EvaluateEnum      eEval = EVAL_STATE_OFF	//!< evaluation method
										);

	//! constructor	for tristate check box				\n no-throw
	LIBBASARGUITIE_API
					CheckBoxTransformer	(const VarString & guiPropTblCol,			//!< gui property table column name
		                                 const VarString & rOn  ,					//!< DB value for state "checked"
		                                 const VarString & rPart,					//!< DB value for state "partially checked"
										 const VarString & rOff ,					//!< DB value for state "unchecked"
										 EvaluateEnum      eEval,					//!< evaluation method
										 const VarString & accPropTblCol			//!< accessor property table column name
										);

	//! transform values from right to left iterator	\n UnknownPropertyTypeException
	LIBBASARGUITIE_API 
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
		                                 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	//! transform values from left to right iterator	\n TypecastFailedException
	LIBBASARGUITIE_API 
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt	//!< iterator to property table/cache controller row
										);

	//! create cloned instance	\n no-throw
	LIBBASARGUITIE_API 
	virtual TransformSharedPtr create	();

	LIBBASARGUITIE_API 
	static ConstString	s_STATEON;		//!< string for check box state checked, evaluated in GuiPropertyTable_XIterator::setString
	LIBBASARGUITIE_API 
	static ConstString	s_STATEPART;	//!< string for check box state partially checked, evaluated in GuiPropertyTable_XIterator::setString
	LIBBASARGUITIE_API 
	static ConstString	s_STATEOFF;		//!< string for check box state unchecked, evaluated in GuiPropertyTable_XIterator::setString

protected:
	bool				m_TriState;		//!< tristate/twostate flag for check box

	EvaluateEnum		m_eEvalMethod;	//!< evaluation method

	VarString			m_GuiPropTblCol;	//!< gui property table column name
	VarString			m_AccPropTblCol;	//!< accessor property table column name
	VarString			m_On;				//!< DB value for state "checked"
	VarString			m_Part;				//!< DB value for state "partially checked"
	VarString			m_Off;				//!< DB value for state "unchecked"

private:
					CheckBoxTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
//! transform iterators between RadioButtons and Accessors
class RadioButtonTransformer : public Transformer
{
public:
	//! destructor	\n no-throw
	LIBBASARGUITIE_API 
	virtual		   ~RadioButtonTransformer	();
	//! constructor	\n no-throw
	LIBBASARGUITIE_API				
					RadioButtonTransformer	(const ParamList & rCorValRes,		//!< parameterlist to set values and widget names: (e.g: "0 = radiobt0; 1 = radiobt1;")
											 const VarString & accPropTblCol	//!< accessor property table column name
											);

	//! transform values from right to left iterator	\n UnknownPropertyTypeException
	LIBBASARGUITIE_API 
	virtual void	RightToLeft				(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
											 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
											);
	//! transform values from left to right iterator	\n TypecastFailedException
	LIBBASARGUITIE_API 
	virtual void	LeftToRight				(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
											 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
											);

	//! create cloned instance	\n no-throw
	LIBBASARGUITIE_API 
	virtual TransformSharedPtr create		();

	LIBBASARGUITIE_API
	static ConstString		s_STATEON;		//!< string for radio button state checked, evaluated in GuiPropertyTable_XIterator::setString
	LIBBASARGUITIE_API
	static ConstString		s_STATEOFF;		//!< string for radio button state unchecked, evaluated in GuiPropertyTable_XIterator::setString

protected:
	VarString	m_AccPropTblCol;	//!< accessor property table column name
	ParamList	m_CorValRes;		//!< parameter list key value of property table column, second name of control

private:
					RadioButtonTransformer	();		//!< forbidden
};

//----------------------------------------------------------------------------
//! transform iterators between GUI Property (= widget) names and Accessors
class PropertyNameTransformer : public Transformer
{
public:
	//! destructor										\n no-throw
	LIBBASARGUITIE_API 
	virtual	   ~PropertyNameTransformer	();

	//! constructor	for property name transformer		\n no-throw
	LIBBASARGUITIE_API				
				PropertyNameTransformer	(const ParamList & rCorProCon	//!< set property table column names and widget names (e.g: "proptblcol0 = widget0; proptblcol1 = widget1;")
										);
	//! constructor	for property name transformer		\n no-throw
	LIBBASARGUITIE_API
				PropertyNameTransformer	(ConstString corProCon	//!< string to set property table column names and widget names (e.g: "proptblcol0 = widget0; proptblcol1 = widget1;")
										);

	//! transform values from right to left iterator	\n UnknownPropertyTypeException
	LIBBASARGUITIE_API 
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
		                                 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	//! transform values from left to right iterator	\n TypecastFailedException
	LIBBASARGUITIE_API 
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										 );

	//! create cloned instance			\n no-throw
	LIBBASARGUITIE_API 
	virtual TransformSharedPtr create	();

protected:
	ParamList		m_CorAccessorGui;	//!< parameter list of property table decription, second name of the control

private:
					PropertyNameTransformer	();		//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief Synchronization of the displayed value for a gui element with the selected
           value of a different gui element.<br>
           Sychronization is done using the name of a column from the first gui element
           and the name of a column from the second gui element.
*/      
class CurrentListTransformer : public Transformer
{
public:
	//! \brief destructor										\n no-throw
	LIBBASARGUITIE_API 
	virtual		   ~CurrentListTransformer	();

	//! \brief constructor	for combo box where gui property is just transformed to an 
	//!        accessor property and the other way round
	//! \n no-throw
	LIBBASARGUITIE_API			
					CurrentListTransformer	(const VarString & guiPropTblCol,	//!< gui property table column name
											 const VarString & accPropTblCol	//!< accessor property table column name
											);

	/*!
      \brief constructor for combo box to show another than the key value out of given property table 
	         in list and to know shown value's key after selection
      \param guiPropTblCol Qt name of GUI element to be synchronized with propertytable of the matcher 
	                       the CurrentListTransformer will be assigned to
      \param accPropTblCol Name of column of PropertyTable of matcher the CurrentListTransformer 
	                       will be assigned to. This name will be used during the search for a matching value 
					       for rKey.
      \param rKey          Name of column of PropertyTable of matcher assigned to
	                       GUI element given by guiPropTblCol. Used for comparison with accPropTblCol.
      \param rValue        Name of column of PropertyTable of matcher assigned to 
						   GUI element given by guiPropTblCol. value to be displayed will be taken from this column.
      \param AccPropTable  Reference to PropertyTable assigned to GUI element mentioned by guiPropTblCol.
    */
	LIBBASARGUITIE_API
					CurrentListTransformer	(const VarString   & guiPropTblCol,
											 const VarString   & accPropTblCol,
											 const VarString   & rKey,
											 const VarString   & rValue,
											 const AccPropTblRef AccPropTable
											);

	//! transform values from right to left iterator	\n UnknownPropertyTypeException
	LIBBASARGUITIE_API 
	virtual void	RightToLeft				(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
		                                     const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
											);
	//! transform values from left to right iterator	\n TypecastFailedException, UnknownPropertyTypeException
	LIBBASARGUITIE_API 
	virtual void	LeftToRight				(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
											 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
											);

	//! create cloned instance	\n no-throw
	LIBBASARGUITIE_API 
	virtual TransformSharedPtr create		();

protected:
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_AccPropTblCol;	//!< accessor property table column name	
	VarString		m_KeyProperty;		//!< description of m_AccPropTblCol in m_AccPropTbl to identify a data row
	VarString		m_ValueProperty;	//!< description of value in m_AccPropTbl to be shown in list, belonging to m_KeyProperty
	AccPropTblRef	m_AccPropTbl;		//!< property table containing key and value which will be transformed

private:
					CurrentListTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for mapping between DB state flags and display values.
           Define mapping in valMap. Not defined values are mapped by given 
		   default values.
    \n     example: map (0|1) to (' '|'X'): 
	\n     StateTransformer sf(basar::cmnutil::ParamPair("1 = X;"), "xyflagcol", "0", ""); 
*/
class StateTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~StateTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					StateTransformer	(const ParamList & valMap,				//!< list with mapped DB/display values
										 const VarString & accPropTblCol,		//!< accessor property table column name
										 const VarString & accPropTblValDef,	//!< default value for accessor property table column if mapped display value doesn't match
										 const VarString & guiPropTblValDef		//!< default value for gui property table column if mapped accessor value doesn't match
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					StateTransformer	(const ParamList & valMap,				//!< list with mapped DB/display values
										 const VarString & accPropTblCol,		//!< accessor property table column name
										 const VarString & guiPropTblCol,		//!< gui property table column name
										 const VarString & accPropTblValDef,	//!< default value for accessor property table column if mapped display value doesn't match
										 const VarString & guiPropTblValDef		//!< default value for gui property table column if mapped accessor value doesn't match
										);

	/*! \brief transform values from right to left iterator		\n throw UnknownPropertyTypeException */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n throw TypecastFailedException */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	ParamList		m_ValMap;			//!< list with mapped DB/display values, e.g. pairs: 0/not defined; 1/defined; 2/X; / (i.e. blank/blank)
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_AccPropTblValDef;	//!< default value for accessor property table column if mapped display value doesn't match
	VarString		m_GuiPropTblValDef; //!< default value for gui property table column if mapped accessor value doesn't match

private:
					StateTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::Int32, Int16 types: left padded with leading zeroes
*/
class IntTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~IntTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					IntTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const Int32       length			//!< minimum length of number string: left padded with leading zeroes
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					IntTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const Int32       length			//!< minimum length of number string: left padded with leading zeroes
										);

	/*! \brief transform values from right to left iterator		\n throw UnknownPropertyTypeException */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n throw TypecastFailedException */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	Int32			m_Length;			//!< minimum length of number string in GUI property table: left padded with leading zeroes 

private:
					IntTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::Decimal type regarding decimal places 
*/
class DecimalTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~DecimalTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DecimalTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const Int16       decPlaces		//!< number of decimal places in fraction area
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DecimalTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const Int16       decPlaces		//!< number of decimal places in fraction area
										);

	/*! \brief transform values from right to left iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	Int16			m_DecPlaces;		//!< number of decimal places in GUI property table

private:
					DecimalTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::DateTime type regarding format string
*/
class DateTimeTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~DateTimeTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DateTimeTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & format			//!< determines string format (see Qt DateTime documentation for details)
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DateTimeTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const VarString & format			//!< determines string format (see Qt DateTime documentation for details)
										);

	/*! \brief transform values from right to left iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_Format;			//!< determines string format (see Qt DateTime documentation for details)

private:
					DateTimeTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::TimeSpan type regarding format string
*/
class TimeSpanTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~TimeSpanTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					TimeSpanTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & format			//!< determines string format
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					TimeSpanTransformer	(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const VarString & format			//!< determines string format
										);

	/*! \brief transform values from right to left iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_Format;			//!< determines string format (see Qt DateTime documentation for details)

private:
					TimeSpanTransformer	();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::Date type regarding format string
*/
class DateTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~DateTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DateTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & format			//!< determines string format (see Qt Date documentation for details)
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					DateTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const VarString & format			//!< determines string format (see Qt Date documentation for details)
										);

	/*! \brief transform values from right to left iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_Format;			//!< determines string format (see Qt Date documentation for details)

private:
					DateTransformer		();	//!< forbidden
};

//----------------------------------------------------------------------------
/*! \brief transformer for basar::Time type regarding format string
*/
class TimeTransformer : public Transformer
{
public:
	/*! \brief d'tor \n no-throw */
	LIBBASARGUITIE_API
	virtual		   ~TimeTransformer	();

	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					TimeTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & format			//!< determines string format (see Qt Time documentation for details)
										);
	/*! \brief c'tor \n no-throw */
	LIBBASARGUITIE_API
					TimeTransformer		(const VarString & accPropTblCol,	//!< accessor property table column name
										 const VarString & guiPropTblCol,	//!< gui property table column name
										 const VarString & format			//!< determines string format (see Qt Time documentation for details)
										);

	/*! \brief transform values from right to left iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	RightToLeft			(GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 const AccPropTblYIterator  accIt	//!< iterator to property table/cache controller row
										);
	/*! \brief transform values from left to right iterator		\n no-throw */
	LIBBASARGUITIE_API
	virtual void	LeftToRight			(const GuiPropertyTable_YIterator guiIt,	//!< iterator to GuiPropertyTable row
										 AccPropTblYIterator              accIt		//!< iterator to property table/cache controller row
										);

	/*! \brief creates cloned instance \n no-throw */
	LIBBASARGUITIE_API
	virtual TransformSharedPtr	create	();

protected:
	VarString		m_AccPropTblCol;	//!< accessor property table column name
	VarString		m_GuiPropTblCol;	//!< gui property table column name
	VarString		m_Format;			//!< determines string format (see Qt Time documentation for details)

private:
					TimeTransformer		();	//!< forbidden
};

//----------------------------------------------------------------------------
} // tie
} // gui
} // basar

#endif
