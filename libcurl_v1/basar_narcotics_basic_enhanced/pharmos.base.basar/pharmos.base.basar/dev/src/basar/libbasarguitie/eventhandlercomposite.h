//----------------------------------------------------------------------------
/*! \file
 *  \brief  event filter for each control
 *  \author Roland Kiefert
 *  \date   28.09.2005
 */
//----------------------------------------------------------------------------

#ifndef GUARD_EVENTHANDLERCOMPOSITE_H
#define GUARD_EVENTHANDLERCOMPOSITE_H

//----------------------------------------------------------------------------
#include <vector>
#include "libbasarguitie_definitions.h"

//----------------------------------------------------------------------------
class QObject;
class QEvent;

//----------------------------------------------------------------------------
namespace basar {
namespace gui {
namespace tie {

//----------------------------------------------------------------------------
class Matcher;

//----------------------------------------------------------------------------
/*! \brief  A class to take the event handle from several controls. 

	This is a final class.
	This is a value class, copying is allowed, generated by the compiler */
class EventHandlerComposite 
{
	friend class ControlBehavour;

public:
	/*! \brief constructor of EventHandler 		\n     no-throw */
							EventHandlerComposite	();

	/*! \brief set an eventhandler for a special widget typ. \n	   throw InvalidParameterException */
	IdEventHandler			setEventHandler		(boost::shared_ptr<QObject> rEventHandler, 
												 WidgetTypes                wtype = qUnset
												);

	/*! \brief delete an eventhandler. \n	   throw InvalidParameterException */
	void					deleteEventHandler	(IdEventHandler id
												);
	/*! \brief set the eventpolicy. \n	   no-throw */
	void					setEventPolicy		(EventPolicyType policy
												);

private:
	/*! \brief check if global events activity. \n	   no-throw */
	bool					isGlobalEventFilter	();

	/*! \brief is the check the lokal events and handle them. \n	   no-throw */
	bool					eventFilterLK		(QObject   * pObject, 
												 QEvent    * pEvent, 
												 WidgetTypes wtype);

	/*! \brief eventhandling for all controls. \n	   no-throw */
	bool					eventFilterGlobal	(QObject *pObject, 
												 QEvent * pEvent
												);

	//! is policy bit set for given widget type? \n no-throw
	bool					isPolicyActive		(WidgetTypes     type	//!< widget type to be checked 
												) const;

	EventPolicyType			m_Policy;			//!< policy of the eventhandler

	//! \brief collection of event handlers
	typedef std::vector < IdEventHandler >	CollEventHandler;

	CollEventHandler		m_CollEvHndl[qUnset + 1];		//!< array of event handler collection
};

//----------------------------------------------------------------------------
} // tie
} // gui
} // basar

#endif
