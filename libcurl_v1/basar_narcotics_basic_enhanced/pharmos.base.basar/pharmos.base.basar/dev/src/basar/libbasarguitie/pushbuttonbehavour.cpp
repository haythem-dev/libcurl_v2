//----------------------------------------------------------------------------
/*! \file
 *  \brief  class implementation of PushButtonBehavour
 *  \author Roland Kiefert
 *  \date   08.09.2006
 */
//----------------------------------------------------------------------------


//---------------------------------------------------------------------------------------//
// includes
//---------------------------------------------------------------------------------------//
#include "pushbuttonbehavour.h"

#pragma warning (push)
#pragma warning (disable: 4231 4244 4800)
#include <QtWidgets/QPushButton>
#pragma warning (pop)

//---------------------------------------------------------------------------------------//
// namespaces
//---------------------------------------------------------------------------------------//
namespace basar {
namespace gui {
namespace tie {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
PushButtonBehavour::PushButtonBehavour(PGuiPropTbl                   pPt,
								       std::list<QWidget*>::iterator it )
									  : ControlBehavour(pPt, it)
{
	m_PushButtonWidget = static_cast<QPushButton*>( (*m_it) );
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
PushButtonBehavour::~PushButtonBehavour()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void PushButtonBehavour::setString( const I18nString& rValue, Int32, Int32 )
{
	m_PushButtonWidget->setText( QString::fromLocal8Bit(rValue.c_str()) );	
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!	\return I18nString value of the current line in the current ctrl.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
I18nString PushButtonBehavour::getString(Int32, Int32) const
{
	return m_PushButtonWidget->text().toLocal8Bit().constData();	
}

///////////////////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void PushButtonBehavour::clear()
{
	m_PushButtonWidget->setText(QString());
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw	no-throw
///////////////////////////////////////////////////////////////////////////////////////////
void PushButtonBehavour::erase( Int32 )
{
}
///////////////////////////////////////////////////////////////////////////////////////////
/*! \return Int32:	number of hits that the ctrl with the most hits (shown rows/items) has.
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////////////
Int32 PushButtonBehavour::maxCountOfControls() const
{
	return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////
//! \throw no-throw
//! \return type of given QObject
///////////////////////////////////////////////////////////////////////////////////////////
WidgetTypes	PushButtonBehavour::getWidgetType() const
{
	return qPushButton;
}

}// tie
} // gui
} // basar
