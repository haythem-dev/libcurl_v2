//----------------------------------------------------------------------------
/*! \file
 *  \brief  connection reference class
 *  \author Björn Bischof
 *  \date   27.10.2005
 */
//----------------------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////////
// includes
//////////////////////////////////////////////////////////////////////////////

#include "libbasardbaspect_connectionref.h"

#include "connection.h"
#include "libbasardbsql_statementref.h"
#include "libbasardbsql_preparedstatementref.h"

//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
// namespaces
//////////////////////////////////////////////////////////////////////////////
namespace basar	 {
namespace db	 {
namespace aspect {

//////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw 
//////////////////////////////////////////////////////////////////////////////
ConnectionRef::ConnectionRef ()
{
}
//////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw 
//! \param  connImpl shared pointer to connection impl
//////////////////////////////////////////////////////////////////////////////
ConnectionRef::ConnectionRef( boost::shared_ptr<Connection> connImpl )
: m_pConnImpl( connImpl )
{
}
//////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw 
//////////////////////////////////////////////////////////////////////////////
ConnectionRef::~ConnectionRef ()
{
}
//////////////////////////////////////////////////////////////////////////////
//!	\return shared pointer to implementation object
//! \throw  NullReferenceException 
//////////////////////////////////////////////////////////////////////////////
const boost::shared_ptr<Connection>& ConnectionRef::getImpl() const
{
	if( 0 == m_pConnImpl.get() ){
		throw NullReferenceException(
				ExceptInfo ("basar.db.aspect.ConnectionRef.getImpl()", 
							"m_pImpl.get() == 0", 
							__FILE__, __LINE__));
	}
	return m_pConnImpl;
}
//////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void ConnectionRef::reset()
{
	m_pConnImpl.reset();
}
//////////////////////////////////////////////////////////////////////////////
//!	\retval true  if shared pointer to implementation object is null
//! \retval false if shared pointer to implementation object is valid
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isNull() const
{
	return ( 0 == m_pConnImpl.get() );
}
//-----------------------------------------------------------------------------------//
// transaction methods
//-----------------------------------------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////////
//!	\throw	NullReferenceException 
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::beginTransaction()
{
	getImpl()->beginTransaction();
}
///////////////////////////////////////////////////////////////////////////////////////
//!	\throw	NullReferenceException 
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::commitTransaction()
{
	getImpl()->commitTransaction();
}
///////////////////////////////////////////////////////////////////////////////////////
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::rollbackTransaction()
{
	getImpl()->rollbackTransaction();
}
///////////////////////////////////////////////////////////////////////////////////////
//! \retval true if a transaction is active at the moment
//! \return otherwise returns false
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isInTransaction() const
{
	return getImpl()->isInTransaction();
}
///////////////////////////////////////////////////////////////////////////////////////
//!	\retval true if given accessor is registered
//! \return otherwise returns false
//! \param  wpAcc weak pointer to accessor
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isRegistered( const AccessorWeakPtr wpAcc ) const
{
	return getImpl()->isRegistered( wpAcc );
}

///////////////////////////////////////////////////////////////////////////////////////
//!	\retval true if given accessor is registered
//! \retval otherwise returns false
//! \param  acc reference to Accessor instance
//!	\throw	no-throw
///////////////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isRegistered(Accessor& acc) const
{
    return getImpl()->isRegistered(acc);
}
///////////////////////////////////////////////////////////////////////////////////////
//! \param  wpAcc weak pointer to accessor
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::doRegister( const AccessorWeakPtr wpAcc )
{
	getImpl()->doRegister( wpAcc );
}
///////////////////////////////////////////////////////////////////////////////////////
//! \param  acc accessor to deregister
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::unRegister( Accessor & acc )
{
	getImpl()->unRegister( acc );
}
///////////////////////////////////////////////////////////////////////////////////////
/*!	\return a reference object of the class StatementRef belonging to the 
			concerned connection.
	\throw	NullReferenceException */
///////////////////////////////////////////////////////////////////////////////////////
ConnectionRef::StatementRef ConnectionRef::createStatement()
{
	return getImpl()->createStatement();
}

///////////////////////////////////////////////////////////////////////////////////////
/*!	\return a reference object of the class PreparedStatementRef belonging to the 
			concerned connection.
	\param  rSql sql statement to prepare
	\param  eCursorType cursor type to use in prepare (defaults to sql::CURS_DEFAULT)
	\throw	NullReferenceException */
///////////////////////////////////////////////////////////////////////////////////////
ConnectionRef::PreparedStatementRef ConnectionRef::createPreparedStatement(const VarString& rSql, sql::CursorTypeEnum eCursorType /*= sql::CURS_DEFAULT*/)
{
    return getImpl()->createPreparedStatement(rSql, eCursorType);
}

///////////////////////////////////////////////////////////////////////////////////////
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::open()
{
	getImpl()->open();
}
///////////////////////////////////////////////////////////////////////////////////////
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::close()
{
	getImpl()->close();
}
///////////////////////////////////////////////////////////////////////////////////////
/*!	\retval	true if the connection (this) has already been opened.
	\throw	NullReferenceException */
///////////////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isOpen() const
{
	return getImpl()->isOpen();
}

///////////////////////////////////////////////////////////////////////////////////
/*!	\retval	true if the connection technically open.
	\return otherwise returns false
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////
bool ConnectionRef::isValid()
{
    return getImpl()->isValid();
}

///////////////////////////////////////////////////////////////////////////////////////
//! \param  eLevel isolation level
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::setIsolationLevel( IsolationLevelEnum eLevel )
{
	getImpl()->setIsolationLevel( eLevel );
}
///////////////////////////////////////////////////////////////////////////////////////
//! \param  eMode lock mode
//! \param  secs seconds to wait in locked state
//!	\throw	NullReferenceException
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::setLockModeWait( LockModeEnum eMode, UInt32 secs )
{
	getImpl()->setLockModeWait( eMode, secs );
}
///////////////////////////////////////////////////////////////////////////////////////
//! \throw no-throw
///////////////////////////////////////////////////////////////////////////////////////
void ConnectionRef::setFetBufSize (int size)
{
	getImpl()->setFetBufSize(size);
}
///////////////////////////////////////////////////////////////////////////////////////
//! \return size of fetch buffer
//! \throw no-throw
///////////////////////////////////////////////////////////////////////////////////////
int ConnectionRef::getFetBufSize()
{
	return getImpl()->getFetBufSize();
}
///////////////////////////////////////////////////////////////////////////////////////
/*!	\return	current connection specific information about db, dbserver, user, password
			and the type of connection (odbc, Informix)
	\throw	NullReferenceException */
///////////////////////////////////////////////////////////////////////////////////////
const ConnectionRef::DatabaseInfo& ConnectionRef::getDbInfo() const
{
	return getImpl()->getDbInfo();
}

///////////////////////////////////////////////////////////////////////////////////
/*!	\return	connectionref of db::sql
	\throw	no-throw */
///////////////////////////////////////////////////////////////////////////////////
const db::sql::ConnectionRef ConnectionRef::getSqlConnection() const
{
	return getImpl()->getSqlConnection();
}

//----------------------------------------------------------------------------
}	// namespace aspect
}	// namespace db
}	// namespace basar
