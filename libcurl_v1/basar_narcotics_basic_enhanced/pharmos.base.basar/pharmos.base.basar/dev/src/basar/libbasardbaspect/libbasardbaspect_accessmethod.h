#ifndef GUARD_LIBBASARDBASPECT_ACCESSMETHOD_H
#define GUARD_LIBBASARDBASPECT_ACCESSMETHOD_H
//----------------------------------------------------------------------------
/*! \file
 *  \brief  public interface access method
 *  \author Roland Kiefert
 *  \date   15.07.2005
 */
//----------------------------------------------------------------------------

#ifndef LIBBASARDBASPECT_API
	#ifdef _WIN32
		#ifdef LIBBASARDBASPECT_EXPORTS
			#define LIBBASARDBASPECT_API __declspec(dllexport)	//!< dll exported
		#else
			#define LIBBASARDBASPECT_API __declspec(dllimport)	//!< dll imported
		#endif 
	#else 
		#define LIBBASARDBASPECT_API
	#endif 
#endif 

//----------------------------------------------------------------------------
#include "libbasardbaspect_definitions.h"


//----------------------------------------------------------------------------
namespace basar  {
namespace db     {
namespace aspect {

//--------------------------------------------------------------------------------------------------
class SQLStringBuilderListRef;
class SQLStringBuilder;
class AccessMethod;

/*--------------------------------------------------------------------------------------------------*/
/*! \brief  A reference class to an acessmethod.

  This is a final class.
  This is a value class, copying is allowed. The class is generated by the compiler */
class AccessMethodRef
{
	friend class Accessor; //!< friend Accessor

public:
	/*! \brief The method creates a new SQLStringBuilder. 
 		\n     no-throw */
	LIBBASARDBASPECT_API SQLStringBuilderIndex push_back(SQLStringBuilder& builder);
	/*! \brief The method returns a reference to a SQLStringBuilder. 
 		\n     OutOfRangeIteratorException, NullReferenceException */
	LIBBASARDBASPECT_API SQLStringBuilderRef getBuilder(SQLStringBuilderListSize index);

	/*! \brief The method returns a reference to a SQLStringBuilder. 
 		\n     OutOfRangeIteratorException, NullReferenceException */
	LIBBASARDBASPECT_API  SQLStringBuilderRef getBuilder(SQLStringBuilderListSize index) const;
	/*! \brief The method returns a list of SQLStringBuilders. 
 		\n     NullReferenceException */
	LIBBASARDBASPECT_API SQLStringBuilderListRef getBuilderList();
	/*! \brief The method returns the name of the accessor method
		\n no-throw */
	LIBBASARDBASPECT_API const VarString &	getAccessorMethodName();
	/*! \brief The method constructs a reference object and initializes the shared pointer to the implementation object to null
 		\n     no-throw */
	LIBBASARDBASPECT_API AccessMethodRef();
	/*! \brief The method checks if the shared pointer to the implementation class is null 
		\n	   no-throw */
	LIBBASARDBASPECT_API bool	isNull() const;
	/*! \brief The method sets the sharedpointer to null.
		\n	   no-throw */
	LIBBASARDBASPECT_API void	reset();

		/*! \brief The method returns the size of the SQLStringBuilder list. 
 		\n     no-throw */
	LIBBASARDBASPECT_API SQLStringBuilderListSize				size() const;
	
	/*! \brief The method checks if there are elements in the SQLStringBuilderList. 
 		\n     no-throw */
	LIBBASARDBASPECT_API bool									empty() const;
private:
	/*! \brief The method sets the accessor method name
		\n no-throw */
	void setAccessorMethodName(VarString name);
	/*! \brief The method creates an AccessMethod copied from itself 
	    \n     no-throw */
	AccessMethodRef createInstance();
	/*! \brief The method creates the pointer to the class AccessMethod. 
 		\n     no-throw */
	AccessMethodRef(boost::shared_ptr<AccessMethod> pMethod);
	/*! \brief The method returns the pointer to an accessMethod. 
 		\n     NullReferenceException */
	const boost::shared_ptr<AccessMethod>& getImpl() const;
	boost::shared_ptr<AccessMethod> m_pMethod; //!< pointer to accessMethod
};


/*--------------------------------------------------------------------------------------------------*/
/*! \brief  Iterator of the class AccessMethodListRef

	This is a final class. */
class AccessMethodList_Iterator
{
public:
	/*! \brief The method inits the Iterator with the value from the parameter list. 
 		\n     NullReferenceException */
	LIBBASARDBASPECT_API AccessMethodList_Iterator( const IAccessorSharedPtr               acc,			//!< Accessor reference
													const CollAccessorMethodRef::iterator itMethod		//!< iterator to its map
												  );

	/*! \brief standard constructor. \n no-throw */
	LIBBASARDBASPECT_API AccessMethodList_Iterator ();

	/*! \brief The method checks if the internal iterator is equal to rhp. \n DifferentContainersIteratorException */
	LIBBASARDBASPECT_API bool operator == (const AccessMethodList_Iterator& rhp) const;
	
	/*! \brief The method checks if the internal Iterator isn't equal to rhp. \n DifferentContainersIteratorException */
	LIBBASARDBASPECT_API bool operator != (const AccessMethodList_Iterator& rhp) const;

	/*! \brief The method returns the next pointer. \n OutOfRangeIteratorException */
	LIBBASARDBASPECT_API AccessMethodList_Iterator operator ++ (); 
	/*! \brief The method returns the current pointer and increases it.\n OutOfRangeIteratorException */
	
	LIBBASARDBASPECT_API AccessMethodList_Iterator operator ++ (int); 
	
	/*! \brief The method returns the current pointer \n OutOfRangeIteratorException */
	LIBBASARDBASPECT_API AccessMethodRef operator*();

	/*! \brief The method checks if the iterator points to begin() of the inner container
		\n     no-throw */
	LIBBASARDBASPECT_API bool					isBegin			() const;

	/*! \brief The method checks if the iterator points to end() of the inner container
		\n     no-throw */
	LIBBASARDBASPECT_API bool					isEnd			() const;

private:
	/*! \brief The method checks if the iterator is valid
 		\n     no-throw */
	void										checkValid		() const;

	CollAccessorMethodRef::iterator		m_It;				//!< the current iterator
	IAccessorSharedPtr					m_Accessor;			//!< pointer to the accessor 
};

/*--------------------------------------------------------------------------------------------------*/
/*! \brief  A class where you have a list of accessor methods.

	This is a final class. */
class AccessMethodListRef
{
public:

public:
	/*! \brief The method inits AccessMethodListRef with the values from the parameter list.
 		\n     no-throw */
	LIBBASARDBASPECT_API AccessMethodListRef( const boost::shared_ptr<IAccessor> Accessor );
	/*! \brief The method returns an iterator to the first element of the AccessMethodList.
 		\n     no-throw */
	LIBBASARDBASPECT_API AccessMethodList_Iterator	begin();
	/*! \brief The method The method returns an iterator to the last element of the AccessMethodList.
 		\n     no-throw */
	LIBBASARDBASPECT_API AccessMethodList_Iterator	end();
	/*! \brief The method returns the size of the AccessMethodList.
 		\n     no-throw */
	LIBBASARDBASPECT_API AccessMethodListSize	    size();
	
	/*! \brief The method checks if the shared pointer to the implementation class is null?\n no-throw */
	LIBBASARDBASPECT_API bool						isNull() const;

	/*! \brief The method sets the sharedpointer to null.\n no-throw */
	LIBBASARDBASPECT_API void						reset();
private:
	/*! \brief	The method returns the pointer to an Accessor. 
 				\n NullReferenceException */
	const boost::shared_ptr<IAccessor>&				getImpl() const;
	boost::shared_ptr<IAccessor>					m_Accessor; //!< pointer to the accessor
};

} // aspect
} // db
} // basar

#endif
