#ifndef GUARD_SQLPREPAREDSTRINGBUILDERIMPL_H
#define GUARD_SQLPREPAREDSTRINGBUILDERIMPL_H
//--------------------------------------------------------------------------------------------------------//
/*! \file
*  \brief  intern interface for building SQL - statements
*  \author Marco Köppendörfer
*  \date   02.04.2014
*/
//--------------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------------//
// includes
//--------------------------------------------------------------------------------------------------------//
#include "libbasar_definitions.h"
#include "sqlstringbuilderbaseimpl.h"
#include "libbasardbaspect_definitions.h"

//--------------------------------------------------------------------------------------------------------//
// namespaces
//--------------------------------------------------------------------------------------------------------//
namespace basar
{
    namespace db
    {
        namespace aspect
        {

//--------------------------------------------------------------------------------------------------------//
// class declaration
//--------------------------------------------------------------------------------------------------------//
            /*! \brief  A class to build SQL - statements.

            This is a final class.
            This is a value class, copying is allowed, generated by the compiler */
//--------------------------------------------------------------------------------------------------------//
            class SQLPreparedStringBuilderImpl : public SQLStringBuilderBaseImpl
            {
                public:

                    ~SQLPreparedStringBuilderImpl();

                    /*! \brief solve the parameter and append the pattern to the SQL-statement. \n UnknownPropertyNameException */
                    virtual void resolve(            const VarString& pattern                            );

                    /*! \brief get IndexTypeCollection for this string builder \n no-throw */
                    virtual const IndexTypeCollection& getPreparedParameterTypePositionCollection() const;

                    /*! \brief set member m_SQLString to empty string and clear parameter type position collection. \n no-throw */
                    virtual void clear();

                private:
                    //----------//
                    // methods
                    //----------//
                    void addTypeAndIndex( const VarString& paramName, basar::Int32 indexPrepStmt );

                    //----------//
                    // members
                    //----------//
                    IndexTypeCollection m_ParameterTypePositionCollection; //<! Collection containing types and indexes (yit and prepared statement) of properties

                    static const VarString scm_maskReplacementString;  //!< replacement for value replacement

            };

            /*--------------------------------------------------------------------------------------------------*/
        } // aspect
    } // db
} // basar

/*--------------------------------------------------------------------------------------------------*/
#endif
