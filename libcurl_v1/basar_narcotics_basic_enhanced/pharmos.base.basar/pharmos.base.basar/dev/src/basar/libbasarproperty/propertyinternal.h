#ifndef GUARD_PROPERTYINTERNAL_H
#define GUARD_PROPERTYINTERNAL_H
//--------------------------------------------------------------------------------------------//
/*! \file
 *  \brief  class PropertyInternal describes the columnname and datatype of every 
			single column.
 *  \author Bischof Björn 
 *  \date   06.08.2005
 */
//--------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------//
// dll imports and exports
//--------------------------------------------------------------------------------------------//
#ifndef LIBBASARPROPERTY_API
	#ifdef _WIN32
		#ifdef LIBBASARPROPERTY_EXPORTS
			#define LIBBASARPROPERTY_API __declspec(dllexport)	//!< dll exported
		#else
			#define LIBBASARPROPERTY_API __declspec(dllimport)	//!< dll imported
		#endif 
	#else 
		#define LIBBASARPROPERTY_API
	#endif 
#endif 

//--------------------------------------------------------------------------------------------//
// includes
//--------------------------------------------------------------------------------------------//
#include "libbasarproperty_propertystate.h"
#include "property_any.hpp"

//--------------------------------------------------------------------------------------------//
// namespaces
//--------------------------------------------------------------------------------------------//
namespace basar
{
namespace property
{

//--------------------------------------------------------------------------------------------//
// class declaration
//--------------------------------------------------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////
/*!	\brief  class PropertyInternal describes the columnname and datatype of every 
			single column.
            
    This is a final class.     
    It is copyable and assignable - these methods are generated by the compiler.*/
class PropertyInternal
{
public:
	//--------------------------------------------------------------------------------------------//
	// typedef section
	//--------------------------------------------------------------------------------------------//
	typedef basar::VarString	ColumnValue; //!< value of a column as string
	/*! \brief	default constructor assigns the value 'UNSET' to the member attribute. 
				\n no-throw */
    
	//--------------------------------------------------------------------------------------------//
	// object section
	//--------------------------------------------------------------------------------------------//
	PropertyInternal(); 
	/*! \brief	overloaded constructor assigns the passed arguments to 
				corresponding member attribute. \n no-throw */
    //PropertyInternal( const ColumnValue& colVal, const PropertyState& ps ); 
    
	//--------------------------------------------------------------------------------------------//
	// set- and get-methods
	//--------------------------------------------------------------------------------------------//
	//! sets the current state \n no-throw
	void						setState( const PropertyState& r );
	
	void                        setState( SupportedStateEnum eState );
	//! returns the current state \n no-throw
    const PropertyState&		getState() const;

	// primitive dataytpes
	//! \brief set int16-value		\n no-throw
	void						setInt16( const basar::Int16& value );
	//! \brief return int16-value		\n no-throw
	const basar::Int16&		    getInt16() const;
	
	//! \brief set int32-value		\n no-throw
	void						setInt32( const basar::Int32& value );
	//! \brief return int32-value		\n no-throw
	const basar::Int32&		    getInt32() const;
	
    void                        setInt64(const basar::Int64& value);
    const basar::Int64&         getInt64() const;

	//! \brief set float32-value		\n no-throw
	void						setFloat32( const basar::Float32& value );
	//! \brief return float32-value		\n no-throw
	const basar::Float32&        getFloat32() const;
	
	//! \brief set float64-value		\n no-throw
	void						setFloat64( const basar::Float64& value );
	//! \brief return float64-value		\n no-throw
	const basar::Float64&       getFloat64() const;

	// complex datatypes
	/*! \brief	sets the value the iterator points to as a Decimal. \n WrongPropertyTypeException  */
	void						setDecimal( const Decimal& value );
	/*! \brief	returns the value the iterator points to as a Decimal.  
		\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
	const Decimal&				getDecimal() const;

	/*! \brief	sets the value the iterator points to as a DateTime. \n WrongPropertyTypeException  */
	void						setDateTime( const DateTime& value );
	/*! \brief	returns the value the iterator points to as a DateTime.  
				\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
	const DateTime&				getDateTime() const;

	/*! \brief	sets the value the iterator points to as a TimeSpan. \n WrongPropertyTypeException  */
	void						setTimeSpan( const TimeSpan& value );
	/*! \brief	returns the value the iterator points to as a TimeSpan.  
				\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
	const TimeSpan&				getTimeSpan() const;	

	/*! \brief	sets the value the iterator points to as a DateTime with time 0. 
				\n WrongPropertyTypeException  */
	void						setDate( const Date& value );
	/*! \brief	returns the value the iterator points to as a DateTime with time 0.  
				\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
	const Date&					getDate() const;

	/*! \brief	sets the value the iterator points to as a DateTime with time 0. 
				\n WrongPropertyTypeException  */
	void						setTime( const Time& value );
	/*! \brief	returns the value the iterator points to as a DateTime with time 0.  
				\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
	const Time&					getTime() const;

	/*! \brief	sets the value the iterator points to as a STRING. \n WrongPropertyTypeException  */
    void						setString( const basar::I18nString& value );
    
    /*! \brief	sets the value the iterator points to as a STRING. Overload for delaying copy \n WrongPropertyTypeException  */
    void						setString( ConstBuffer value );
    
	/*! \brief	returns the value the iterator points to as a STRING.   
		\n WrongPropertyTypeException, WrongOperationException, FatalErrorException */
    const basar::I18nString&	getString() const;

    void                        setBinary(const basar::Binary& value);
    const basar::Binary&        getBinary() const;
		
private:
	//--------------------------------------------------------------------------------------------//
	// private members
	//--------------------------------------------------------------------------------------------//
	//! represents the state which depends on the call of setAnyValue()-method
	PropertyState					m_State;
	//! represents the value (type:cmnutil::any)
	mutable basar::property::any	m_any;

}; // END class Property


} // END namespace property
} // END namespace basar

#endif // GUARD_PROPERTYINTERNAL_H
