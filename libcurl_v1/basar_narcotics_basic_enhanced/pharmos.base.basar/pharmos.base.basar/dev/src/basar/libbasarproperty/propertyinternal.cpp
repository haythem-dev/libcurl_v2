//////////////////////////////////////////////////////////////////////////////
/*! \file
 *  \brief  class PropertyInternal describes the columnname and datatype of every 
			single column.
 *  \author Bischof Björn 
 *  \date   25.07.2005
 */
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// includes
//////////////////////////////////////////////////////////////////////////////
#include "propertyinternal.h"

#include "libbasarcmnutil_decimal.h"
#include "libbasarcmnutil_i18nstring.h"
#include "libbasarcmnutil_datetime.h"
#include "libbasarcmnutil_timespan.h"
#include "libbasarcmnutil_date.h"

//////////////////////////////////////////////////////////////////////////////
// namespaces
//////////////////////////////////////////////////////////////////////////////
namespace basar
{
namespace property
{
//////////////////////////////////////////////////////////////////////////////
// class implementation
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
PropertyInternal::PropertyInternal()
{
}
//////////////////////////////////////////////////////////////////////////////
/* \param  colVal passed reference value for the concerned db-table attribute; 
	\param	ps		const value object (type: PropertyType) representing the state
					which will be changed dependent on every new 
					setAnyValue()-method call.
	\throw	no-throw */
//////////////////////////////////////////////////////////////////////////////
//PropertyInternal::PropertyInternal( const ColumnValue& colVal /*= ""*/, 
//								    const PropertyState& ps /*= PropertyState()*/)
//: m_State( ps )
//{
//}
//////////////////////////////////////////////////////////////////////////////
//! \return PropertyState
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const PropertyState& PropertyInternal::getState() const
{
    return m_State;
}
//////////////////////////////////////////////////////////////////////////////
//! \param  ps represents the state which is set to member attribute
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setState( const PropertyState& ps )
{
	m_State = ps;
}

void PropertyInternal::setState( SupportedStateEnum eState )
{
	m_State = eState;
}

//--------------------------------------------------------------------------//
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setInt16( const basar::Int16& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Int16& PropertyInternal::getInt16() const
{
	return m_any.getInt16();
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setInt32( const basar::Int32& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Int32& PropertyInternal::getInt32() const
{
	return m_any.getInt32();
}

void PropertyInternal::setInt64(const basar::Int64 & value)
{
    m_any = value;
}

const basar::Int64 & PropertyInternal::getInt64() const
{
    return m_any.getInt64();
}

//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setFloat32( const basar::Float32& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Float32& PropertyInternal::getFloat32() const
{
	return m_any.getFloat32();
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setFloat64( const basar::Float64& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Float64& PropertyInternal::getFloat64() const
{
	return m_any.getFloat64();
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setDecimal( const basar::Decimal& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Decimal& PropertyInternal::getDecimal() const
{
	return *(basar::property::any_cast<Decimal>(&m_any) );
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setDateTime( const basar::DateTime& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::DateTime& PropertyInternal::getDateTime() const
{
	return *(basar::property::any_cast<basar::DateTime>( &m_any ));
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setTimeSpan( const basar::TimeSpan& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::TimeSpan& PropertyInternal::getTimeSpan() const
{
	return *(basar::property::any_cast<basar::TimeSpan>( &m_any ));
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setDate( const basar::Date& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Date& PropertyInternal::getDate() const
{
	return *(basar::property::any_cast<basar::Date>( &m_any ));
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setTime( const basar::Time& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Time& PropertyInternal::getTime() const
{
	return *(basar::property::any_cast<basar::DateTime>( &m_any ));
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setString( const basar::I18nString& value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setString( ConstBuffer value )
{
	m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::I18nString& PropertyInternal::getString() const
{
	return *(basar::property::any_cast<basar::I18nString>( &m_any ));
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \param  value: value to set where iterator points to
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
void PropertyInternal::setBinary(const basar::Binary & value)
{
    m_any = value;
}
//////////////////////////////////////////////////////////////////////////////
//! \return 
//! \throw  no-throw
//////////////////////////////////////////////////////////////////////////////
const basar::Binary & PropertyInternal::getBinary() const
{
    return *(basar::property::any_cast<basar::Binary>(&m_any));
}

} // End namespace property
} // End namespace basar
