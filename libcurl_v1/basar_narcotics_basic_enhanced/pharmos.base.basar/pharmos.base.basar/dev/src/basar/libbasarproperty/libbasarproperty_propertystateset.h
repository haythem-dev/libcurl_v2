#ifndef GUARD_PROPERTY_STATE_SET_H
#define GUARD_PROPERTY_STATE_SET_H
//--------------------------------------------------------------------------------------------//
/*! \file
 *  \brief  class PropertyStateSet describes the states 
			(SS_UNKNOWN, SS_CLEAN, SS_UNSET, SS_INSERT, SS_UPDATE, SS_DELETE) of a resultset row. 
 *  \author Bischof Björn 
 *  \date   06.08.2005
 */
//--------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------//
// dll imports and exports
//--------------------------------------------------------------------------------------------//
#ifndef LIBBASARPROPERTY_API
	#ifdef _WIN32
		#ifdef LIBBASARPROPERTY_EXPORTS
			#define LIBBASARPROPERTY_API __declspec(dllexport)	//!< dll exported
		#else
			#define LIBBASARPROPERTY_API __declspec(dllimport)	//!< dll imported
		#endif 
	#else 
		#define LIBBASARPROPERTY_API
	#endif 
#endif 

//--------------------------------------------------------------------------------------------//
#include "libbasarproperty_supportedstate.h"

//--------------------------------------------------------------------------------------------//
// namespaces
//--------------------------------------------------------------------------------------------//
namespace basar
{
namespace property
{

//--------------------------------------------------------------------------------------------//
// forward declaration
//--------------------------------------------------------------------------------------------//
class PropertyState;

//--------------------------------------------------------------------------------------------//
// class declaration
//--------------------------------------------------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////
/*!	\brief  class PropertyStateSet describes the states 
			(SS_UNKNOWN, SS_CLEAN, SS_UNSET, SS_INSERT, SS_UPDATE, SS_DELETE) of a resultset row. 
            
    This is a final class.     
    It is copyable and assignable - the methods are generated by the compiler.
    Class throws the exception class IllegalPropertyStateException.*/
class PropertyStateSet
{
public:	
	//--------------------------------------------------------------------------------------------//
	// object section
	//--------------------------------------------------------------------------------------------//
	// "or"-ed Set
	/*! \brief	default and overloaded constructor (2 in 1 via default initialization) 
				assigns the value 'SS_UNKNOWN' by default, otherwise the passed argument 
				to the member attribute. 
				Serveral states can be passed in the form of "or" (e.g. SS_INSERT | SS_UPDATE).
				\n IllegalPropertyStateException */
	LIBBASARPROPERTY_API PropertyStateSet( const Int32 supportedState = SS_UNKNOWN );
    
	//! checks equality of pss and the member attribute \n no-throw
	LIBBASARPROPERTY_API bool						operator==( const PropertyStateSet& pss ) const;
	//! negates the return value of the operator==() \n no-throw
	LIBBASARPROPERTY_API bool						operator!=( const PropertyStateSet& pss ) const;
	//! \brief adds (does not overwrite) a state to the member attribute (SupportedStateEnum) \n no-throw
	LIBBASARPROPERTY_API bool						insert( const SupportedStateEnum eSupportedState );
	//! checks if the passed state is held in the member attribute \n no-throw
	LIBBASARPROPERTY_API bool						contains( const SupportedStateEnum eSupportedState ) const;
	//! checks if the passed PropertyState is held in the member attribute \n no-throw
	LIBBASARPROPERTY_API bool						contains( const PropertyState& ps ) const;
	/*! \brief	checks if the passed PropertyStateSet is held in the member attribute
				as subset or intersection\n no-throw */
	LIBBASARPROPERTY_API bool						contains( const PropertyStateSet& pss ) const;
	
	//! converts the state (SupportedStateEnum) of the member to string \n no-throw
	LIBBASARPROPERTY_API const SupportedStateName	toString() const;
	//! returns the member's (SupportedStateEnum) states \n no-throw
	LIBBASARPROPERTY_API SupportedStateEnum	        getStates() const;

private: 
	//--------------------------------------------------------------------------------------------//
	// private methods
	//--------------------------------------------------------------------------------------------//
	//! help method to check if the passed state is held in the member attribute \n no-throw
	inline bool										checkContains( const SupportedStateEnum eSupportedState ) const;
	//! help method to check if the passed state is valid \n no-throw
	bool											isValid( const Int32 supportedState ) const;
	
	//--------------------------------------------------------------------------------------------//
	// private members
	//--------------------------------------------------------------------------------------------//
	//! represents the state set
	SupportedStateEnum m_eState;

}; // END class PropertyStateSet

} // END namespace property
} // END namespace basar

#endif // GUARD_PROPERTY_STATE_SET_H
