#ifndef GUARD_PROPERTYSTATE_H
#define GUARD_PROPERTYSTATE_H
//--------------------------------------------------------------------------------------------//
/*! \file
 *  \brief  class representing the possible states 
			(determines the database action, e.g update- or insert-action)
 *  \author Bischof Björn 
 *  \date   25.07.2005
 */
//--------------------------------------------------------------------------------------------//


//--------------------------------------------------------------------------------------------//
// dll imports and exports
//--------------------------------------------------------------------------------------------//
#ifndef LIBBASARPROPERTY_API
	#ifdef _WIN32
		#ifdef LIBBASARPROPERTY_EXPORTS
			#define LIBBASARPROPERTY_API __declspec(dllexport)	//!< dll exported
		#else
			#define LIBBASARPROPERTY_API __declspec(dllimport)	//!< dll imported
		#endif 
	#else 
		#define LIBBASARPROPERTY_API
	#endif 
#endif 

//--------------------------------------------------------------------------------------------//
#include "libbasar_definitions.h"
#include "libbasarproperty_supportedstate.h"

//--------------------------------------------------------------------------------------------//
// namespaces
//--------------------------------------------------------------------------------------------//
namespace basar
{
namespace property
{

//--------------------------------------------------------------------------------------------//
// class declaration
//--------------------------------------------------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////
/*! \brief  class PropertyState describes the possible states 
			(SS_UNKNOWN, SS_CLEAN, SS_UNSET, SS_INSERT, SS_UPDATE, SS_DELETE) of a resultset row. 
			
			This is a final class.
			It is copyable and assignable - the methods are generated by the compiler.
			Class throws the exception class IllegalPropertyStateException.
*/
class PropertyState
{
public:
	//-----------------//
    // object section
    //-----------------//
    /*! \brief	default and overloaded constructor (2 in 1 via default initialization) 
				assigns the value 'SS_UNSET' by default, otherwise the passed argument 
				to the member attribute \n IllegalSupportedStateException */
	LIBBASARPROPERTY_API PropertyState(	const SupportedStateEnum eSupportedState = basar::SS_UNSET );
	
	//! assignment operator
	LIBBASARPROPERTY_API PropertyState& operator= (const PropertyState& rhs);
	
	//! assignment overload for SupportedStateEnum
	LIBBASARPROPERTY_API PropertyState& operator= (SupportedStateEnum eSupportedState);
	
	//! copy c'tor
	LIBBASARPROPERTY_API PropertyState(const PropertyState& source);
	
	//! checks the equality of two states \n no-throw
	LIBBASARPROPERTY_API bool						operator==( const PropertyState& ps ) const;
    //! negates the return value of the operator==() \n no-throw
	LIBBASARPROPERTY_API bool						operator!=( const PropertyState& ps ) const;
	//! checks the equality of two states \n no-throw
	LIBBASARPROPERTY_API bool						operator==( SupportedStateEnum eSupportedState ) const;
    //! negates the return value of the operator==() \n no-throw
	LIBBASARPROPERTY_API bool						operator!=( SupportedStateEnum eSupportedState ) const;
    //! returns the member attribute state as SupportedStateName (string) \n no-throw
	LIBBASARPROPERTY_API const SupportedStateName	toString() const;
	//! returns the member attribute state as SupportedStateEnum (enum) \n no-throw
	LIBBASARPROPERTY_API SupportedStateEnum         getState() const;

private:
	//-----------------//
    // member section
    //-----------------//
	//! member attribute representing the current value of the state
	SupportedStateEnum m_eState;

}; // END class PropertyState

} // END namespace property
} // END namespace basar

#endif // END GUARD_PROPERTYSTATE_H
