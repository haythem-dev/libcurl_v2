//----------------------------------------------------------------------------
/*! \file
 *  \brief  intern interface for plugin for multple column combobox
 *  \author Roland Kiefert 
 *  \date   26.01.2006
 */
//----------------------------------------------------------------------------

#ifndef GUARD_MULTICOMBOBOXPLUGIN_H
#define GUARD_MULTICOMBOBOXPLUGIN_H

//--------------------------------------------------------------------------------------------------------------//
// includes
//--------------------------------------------------------------------------------------------------------------//
#pragma warning (push)
#pragma warning(disable: 4127)
#include <QtDesigner/QDesignerCustomWidgetInterface>
#pragma warning (pop)

//----------------------------------------------------------------------------
/*! \brief  A class to make a plugin for combobox with more then one column. 

	This is a final class.
	This is a value class, with copying is allowed and generated by the compliler 
*/
class MultiCombBoxPlugin : public QObject, public QDesignerCustomWidgetInterface
{
    Q_OBJECT
    Q_INTERFACES(QDesignerCustomWidgetInterface)

public:
	/*! \brief This constructor from MultiCombBoxPlugin 
		\n     no-throw */
    MultiCombBoxPlugin(QObject *parent = 0					//!< parent widget
					   );

	/*! \brief Returns true if the custom widget is intended to be used as a container; otherwise returns false.
		\n     no-throw */
    bool isContainer() const;
	/*! \brief Returns true if the widget has been initialized; otherwise returns false.
		\n     no-throw */
	bool isInitialized() const;
	/*! \brief Returns the icon used to represent the custom widget in Qt Designer's widget box.
		\n     no-throw */
    QIcon icon() const;
	/*! \brief Returns the code template that Qt Designer includes in forms that contain the custom widget when they are saved.
		\n     no-throw */
    QString codeTemplate() const;
	/*! \brief Returns the name of the group to which the custom widget belongs.
		\n     no-throw */
    QString group() const;
	/*! \brief Returns the path to the include file that uic uses when creating code for the custom widget.
		\n     no-throw */
    QString includeFile() const;
	/*! \brief Returns the name of the class that implements the custom widget.
		\n     no-throw */
    QString name() const;
	/*! \brief Returns a short description of the widget that can be used by Qt Designer in a tool tip.
		\n     no-throw */
    QString toolTip() const;
	/*! \brief Returns a description of the widget that can be used by Qt Designer in "What's This?" help for the widget.
		\n     no-throw */
    QString whatsThis() const;
	/*! \brief Returns a new instance of the custom widget, with the given parent.
		\n     no-throw */
    QWidget *createWidget(QWidget *parent					//!< parent widget
						 );
	/*! \brief Initializes the widget for use with the specified formEditor interface.
		\n     no-throw */
    void initialize(QDesignerFormEditorInterface *core		//!< QDesignerFormEditorInterface * formEditor
					);

private:
    bool initialized;										//!< true if the widget has been initialized
};

#endif //GUARD
