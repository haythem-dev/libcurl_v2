//----------------------------------------------------------------------------
/*! \file
 *  \brief  intern interface multple column combobox
 *  \author Roland Kiefert 
 *  \date   26.01.2006
 */
//----------------------------------------------------------------------------

#ifndef GUARD_LIBBASARGUIQT_MULTICOMBOBOX_H
#define GUARD_LIBBASARGUIQT_MULTICOMBOBOX_H

//--------------------------------------------------------------------------------------------------------------//
// includes
//--------------------------------------------------------------------------------------------------------------//
#include <QtDesigner/QDesignerExportWidget>

#pragma warning (push)
#pragma warning(disable: 4127 4505)
#include <QtWidgets/QComboBox>
#pragma warning (pop)

#include "libbasar_definitions.h"

class QStandardItemModel;
class QTableView;

//----------------------------------------------------------------------------
/*! \brief  A class to make a combobox with more then one column. 

	This is a final class.
	This is a value class, with copying is allowed and generated by the compliler */
class QDESIGNER_WIDGET_EXPORT MultiComboBox : public QComboBox
{
	Q_OBJECT
	Q_PROPERTY(int ColumnCount READ columnCount WRITE setColumnCount)	//!< number of columns
	
public:

	/*! \brief default / overloaded constructor of MultiComboBox 
		\n     no-throw */
    explicit MultiComboBox(QWidget *parent = 0			//!< parent widget
						);

	/*! \brief destructor of MultiComboBox 
		\n     no-throw */
	~MultiComboBox();

	/*! \brief return number of columns in multicombobox 
		\n     no-throw */
	int columnCount();

	/*! \brief set the number of the columns. 
		\n	   throw BasarOutOfRangeIndexException */
	void setColumnCount(int count						//!< number of columns
						);

    using QComboBox::addItem;

	/*! \brief set a multicombobox item consisting of the passed item to given row and column. 
		\n	   throw BasarOutOfRangeIndexException */
	void addItem(int row,								//!< row from the item
				 int column,							//!< column from the item
				 const QString & item					//!< item text which is set
				);

    using QComboBox::itemText;

    /*! \brief get a multicombobox item consisting of the passed item to given row and column. 
		\n	   throw BasarOutOfRangeIndexException */
	QString itemText(int row,							//!< row from the item
					 int column							//!< column from the item
					 );
	/*! \brief check if horizontal header is hidden
		\n	   no-throw */
	bool isHorizontalHeaderHidden();

	/*! \brief hide the horizontal header of the combbox
		\n	   no-throw */
	void hideHorizontalHeader(bool hidden = true		//!< true the header will be hidden
								);

	/*! \brief set the header value of the horizontal header of the combbox
		\n	   throw BasarOutOfRangeIndexException */
	void setHorizontalHeaderItem(int column,			//!< column Header
								 const QString &value	//!< header text
								);

	/*! \brief get the header value of the horizontal header of the combbox
		\n	   throw BasarOutOfRangeIndexException */
	QString getHorizontalHeaderItem(int column				//!< column Header
									); 

	/*! \brief check if vertical header is hidden
		\n	   no-throw */
	bool isVerticalHeaderHidden();

	/*! \brief hide the vertical header of the combbox
		\n	   no-throw */
	void hideVerticalHeader(bool hidden = true		//!< true the header will be hidden
							 );

	/*! \brief set the header value of the vertical header of the combbox
		\n	   throw BasarOutOfRangeIndexException */
	void setVerticalHeaderItem(int column,			//!< column Header
							   const QString &value	//!< header text
							  );

	/*! \brief get the header value of the vertical header of the combbox
		\n	   throw BasarOutOfRangeIndexException */
	QString getVerticalHeaderItem(int row				//!< row Header
								 ); 


	/*! \brief set minimum height of m_View
		\n	   no-throw */
	void setMinimumHeightList	(int height				//!< height of list that is at least shown when list is displayed, default 70
								);

	/*! \brief return minimum height of m_View
		\n	   no-throw */
	int	 getMinimumHeightList	();

	/*! \brief set minimum width of m_View
		\n	   no-throw */
	void setMinimumWidthList	(int width				//!< width of list that is at least shown when list is displayed
								);

	/*! \brief return minimum width of m_View
		\n	   no-throw */
	int	 getMinimumWidthList	();

	/*! \brief set minimum width + heightof m_View
		\n	   no-throw */
	void setMinimumSizeList		(int width,				//!< width of list that is at least shown when list is displayed
								 int height				//!< height of list that is at least shown when list is displayed, default 70
								 );

    // allow shadowing
    using QComboBox::setItemText;

	/*! \brief set text to item
		\n	   no-throw */
	void setItemText( int row,								//!< row to set item text to
					  int column,							//!< column to set item text to
					  const QString & itemText				//!< text to set
					);

	/*! \brief insert new row to tablewidget
		\n	   BasarOutOfRangeIndexException */
	void insertRow ( int rowIndex,							//!< index where new row should be inserted
					 std::list<basar::VarString> itemTexts, //!< list of item texts to insert (size == m_ColumnCount!)
					 int modelColumn = 0,					//!< index of model column
					 const QVariant & userData = QVariant() //!< qt's user data
					);

	/*! \brief remove row from tablewidget
		\n	   BasarOutOfRangeIndexException */
	void removeRow ( int rowIndex							//!< index of row to remove
					);
	
	/*! \brief set column width of tableview to contents size
		\n	   no-throw */
	void resizeColumnsToContents();
	
	/*! \brief set column width of passed column of tableview to contents size
		\n	   BasarOutOfRangeIndexException */
	void resizeColumnToContents	(int column		//!< column to be resized
								);
	
	/*! \brief set row height of tableview to contents size
		\n	   no-throw */
	void resizeRowsToContents	();
	
	/*! \brief set row height of passed row of tableview to contents size
		\n	   BasarOutOfRangeIndexException */
	void resizeRowToContents	(int row		//!< row to be resized
								);
	
	/*! \brief get column width of passed column
		\n	   BasarOutOfRangeIndexException */
	int	 columnWidth			(int column		//!< column to ask for width
								);
	
	/*! \brief get row height of passed row
		\n	   BasarOutOfRangeIndexException */
	int	 rowHeight				(int row		//!< row to ask for height
								);

	/*! \brief set column width of passed column of tableview to passed width
		\n	   BasarOutOfRangeIndexException */
	void setColumnWidth			(int column,	//!< column to be resized	
								 int width		//!< width to set for passed column
								);
	
	/*! \brief set row height of passed row of tableview to passed height
		\n	   BasarOutOfRangeIndexException */
	void setRowHeight			(int row,		//!< row to be resized
								 int height		//!< height to set for passed row
								 );

	/*! \brief hide passed column of tableview
		\n	   BasarOutOfRangeIndexException */
	void hideColumn				(int column		//!< column to hide
								);
	
	/*! \brief show passed column of tableview
		\n	   BasarOutOfRangeIndexException */
	void showColumn				(int column		//!< column to show
								);
	
	/*! \brief show / hide passed column of tableview
		\n	   BasarOutOfRangeIndexException */
	void setColumnHidden		(int column,	//!< column to hide / show
								 bool hidden	//!< shown or hidden
								);
	
	/*! \brief check if passed column of tableview is hidden
		\n	   BasarOutOfRangeIndexException */
	bool isColumnHidden			(int column		//!< column to check
								);
	
	/*! \brief hide passed row of tableview
		\n	   BasarOutOfRangeIndexException */
	void hideRow				(int row		//!< row to hide
								);
	
	/*! \brief show passed row of tableview
		\n	   BasarOutOfRangeIndexException */
	void showRow				(int row		//!< row to show
								);
	
	/*! \brief show / hide passed row of tableview
		\n	   BasarOutOfRangeIndexException */
	void setRowHidden			(int row,		//!< row to hide / show
								 bool hidden	//!< shown or hidden
								 );
	
	/*! \brief check if passed row of tableview is hidden
		\n	   BasarOutOfRangeIndexException */
	bool isRowHidden			(int row		//!< row to check
								);

	/*! \brief select passed row of tableview
		\n	   BasarOutOfRangeIndexException */
	void selectRow				(int row		//!< row to select
								);

	/*! \brief clear the control and the model
		\n	   no-throw */
	void clear					();

	/*!	\brief clear the multicombobox, but not the headers from them
		\n	   no-throw */
	void clearContext			();

	/*!	\brief returns list of all horizontal header labels of the multi combo box
		\n	   no-throw */
	const std::list<basar::VarString> horizontalHeaderLabels();
	/*!	\brief returns list of all vertical header labels of the multi combo box
		\n	   no-throw */
	const std::list<basar::VarString> verticalHeaderLabels();
	
protected:
	int									m_ColumnCount;		//!< number of the columns of the combobox
	QStandardItemModel	*				m_Model;			//!< model of the combobox
	QTableView *						m_View;				//!< view of the combobox (= tablewidget)
	QStandardItemModel	*				m_HorHeaderModel;	//!< model of the tablewidget's horizontal headers
	bool								m_VerticalHeaderHidden;		//!< true if vertical header is hidden
	bool								m_HorizontalHeaderHidden;	//!< true if horizontal header is hidden
};

#endif // GUARD_LIBBASARGUIQT_TABLEWIDGET_H

